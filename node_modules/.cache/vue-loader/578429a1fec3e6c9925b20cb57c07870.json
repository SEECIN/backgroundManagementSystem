{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\电商管理\\background-manage-system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\电商管理\\background-manage-system\\src\\components\\base\\BaseModal.vue?vue&type=style&index=0&lang=stylus&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\电商管理\\background-manage-system\\src\\components\\base\\BaseModal.vue","mtime":1666968705821},{"path":"C:\\Users\\Administrator\\Desktop\\电商管理\\background-manage-system\\node_modules\\css-loader\\dist\\cjs.js","mtime":1666968688074},{"path":"C:\\Users\\Administrator\\Desktop\\电商管理\\background-manage-system\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1666968703728},{"path":"C:\\Users\\Administrator\\Desktop\\电商管理\\background-manage-system\\node_modules\\postcss-loader\\src\\index.js","mtime":1666968696921},{"path":"C:\\Users\\Administrator\\Desktop\\电商管理\\background-manage-system\\node_modules\\stylus-loader\\index.js","mtime":1666968702411},{"path":"C:\\Users\\Administrator\\Desktop\\电商管理\\background-manage-system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1666968684658},{"path":"C:\\Users\\Administrator\\Desktop\\电商管理\\background-manage-system\\node_modules\\vue-loader\\lib\\index.js","mtime":1666968703727}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5kaWFsb2dNb2RhbCAuZWwtZGlhbG9nIA0KICBtYXgtaGVpZ2h0IDcwdmgNCiAgb3ZlcmZsb3cteTogYXV0bw0KICAuZWwtZGlhbG9nX19oZWFkZXINCiAgICB0ZXh0LWFsaWduIGNlbnRlcg0K"},{"version":3,"sources":["BaseModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqQA;AACA;AACA;AACA;AACA","file":"BaseModal.vue","sourceRoot":"src/components/base","sourcesContent":["<template>\r\n  <div>\r\n    <el-dialog class=\"dialogModal\"\r\n               :title=\"title\"\r\n               :show-close=\"false\"\r\n               :visible=\"isShow\">\r\n      <BaseForm :type=\"type\"\r\n                :form='form'\r\n                :treeData=\"treeData\"\r\n                :roleList=\"roleList\"\r\n                :rules=\"rules\"\r\n                :token=\"token\"\r\n                :modalFormData=\"modalFormData\"\r\n                :categoryList=\"categoryList\"\r\n                :selectOptions='selectOptions'\r\n                :handleUploadChange=\"handleUploadChange\"\r\n                :handleUploadRequest=\"handleUploadRequest\"\r\n                ref=\"form\" />\r\n      <div slot=\"footer\"\r\n           class=\"dialog-footer\">\r\n        <el-button @click=\"closeModal\">取 消</el-button>\r\n        <el-button type=\"primary\"\r\n                   @click=\"submit\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport store from \"store\"\r\nimport MODAL_FORM_DATA from '@/config/modalForm.config'\r\nimport VALIDATE_DATA from '@/config/validate.config'\r\nimport BaseForm from \"components/base/BaseForm\"\r\nimport { dynamicRoutes } from \"@/router/index\"\r\nimport { createNamespacedHelpers } from 'vuex'\r\nconst { mapState, mapActions } = createNamespacedHelpers('modal')\r\nimport { Message } from 'element-ui'\r\nexport default {\r\n  name: 'BaseModal',\r\n  components: {\r\n    BaseForm\r\n  },\r\n  data() {\r\n    return {\r\n      form: {},\r\n      selectOptions: {},\r\n      categoryList: [],\r\n      firstCategory: [],\r\n      secondCategory: [],\r\n      thirdCategory: [],\r\n      roleList: [],\r\n      axiosResult: {},\r\n      productFormData: new FormData()\r\n    }\r\n  },\r\n  created() {\r\n    this.$bus.$on('transmitFormData', data => {\r\n      this.form = data\r\n    })\r\n    this.$bus.$on('formatSelectOptions', data => {\r\n      this.formatSelectOptions(data || this.categoryList)\r\n    })\r\n  },\r\n  watch: {\r\n    async type(type) {\r\n      if (type.includes('User')) {\r\n        let result = await this.$axios('getRoleList')\r\n        this.roleList = result.data.roleList\r\n      }\r\n      if (['addProduct', 'editProduct'].includes(type)) {\r\n        let result = await this.$axios('getProductsCategory')\r\n        this.categoryList = result.data.result\r\n      }\r\n    },\r\n    isShow(val) {\r\n      if (!val) {\r\n        this.$bus.$on('formatSelectOptions', data => {\r\n          this.formatSelectOptions(data || this.categoryList)\r\n        })\r\n        let tree\r\n        if (this.type.includes('Role')) {\r\n          tree = this.$refs['form'].$refs['tree'][0]\r\n          tree.setCheckedKeys([])\r\n        }\r\n        this.form = {}\r\n        this.$bus.$on('transmitFormData', data => {\r\n          this.form = data\r\n          if (tree) tree.setCheckedKeys(data.roleAuth)\r\n        })\r\n        this.productFormData = new FormData()\r\n        if (this.type.includes(\"addProduct\")) this.$refs[\"form\"].$refs[\"upload\"][0].uploadFiles = []\r\n      } else {\r\n        this.$bus.$off('transmitFormData')\r\n        this.$bus.$off('formatSelectOptions')\r\n      }\r\n    },\r\n    form: {\r\n      handler: function(newVal) {\r\n        if (this.$route.path === \"/productsclassify\") {\r\n          let existFirstCategory = this.firstCategory.filter(item => item.categoryName === this.form.firstCategory)\r\n          if (existFirstCategory.length === 0) {\r\n            this.secondCategory = []\r\n            this.thirdCategory = []\r\n          }\r\n          this.categoryList.filter(item => {\r\n            if (newVal.firstCategory === item.categoryName) {\r\n              this.secondCategory = item.child.reduce((acc, curr) => {\r\n                acc.push({\r\n                  categoryName: curr.categoryName,\r\n                  id: curr?.id,\r\n                  rootName: curr?.rootName\r\n                })\r\n                return acc\r\n              }, [])\r\n              if (newVal.secondCategory) {\r\n                item.child.filter(children => {\r\n                  if (newVal.secondCategory === children.categoryName) {\r\n                    this.thirdCategory = children.child.reduce((acc, curr) => {\r\n                      acc.push({\r\n                        categoryName: curr.categoryName,\r\n                        id: curr?.id,\r\n                        parentName: curr?.parentName\r\n                      })\r\n                      return acc\r\n                    }, [])\r\n                  }\r\n                })\r\n              }\r\n            }\r\n          })\r\n          this.selectOptions = { firstCategory: this.firstCategory, secondCategory: this.secondCategory, thirdCategory: this.thirdCategory }\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n    secondCategory(newVal, oldVal) {\r\n      if (newVal[0]?.rootName !== oldVal[0]?.rootName && this.form.secondCategory) {\r\n        this.form.secondCategory = \"\"\r\n        if (this.form.thirdCategory) this.form.thirdCategory = \"\"\r\n      }\r\n      let existFirstCategory = this.firstCategory.filter(item => item.categoryName === this.form.firstCategory)\r\n      let existSecondCateory = oldVal.filter(item => item.categoryName === this.form.secondCategory)\r\n      if (existFirstCategory.length > 0 && existSecondCateory.length === 0 && this.form.secondCategory) this.thirdCategory = []\r\n    },\r\n    thirdCategory(newVal, oldVal) {\r\n      if (newVal[0]?.parentName !== oldVal[0]?.parentName && this.form.thirdCategory) this.form.thirdCategory = \"\"\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(['isShow', 'type']),\r\n    title() {\r\n      return MODAL_FORM_DATA[this.type]?.title\r\n    },\r\n    treeData() {\r\n      return this.formatTreeData(dynamicRoutes)\r\n    },\r\n    rules() {\r\n      return VALIDATE_DATA\r\n    },\r\n    modalFormData() {\r\n      return MODAL_FORM_DATA[this.type]?.children\r\n    },\r\n    token() {\r\n      return store.get(process.env.VUE_APP_USER_INFO)?.token\r\n    }\r\n  },\r\n  methods: {\r\n    submit() {\r\n      if (this.type.includes('Role')) {\r\n        const tree = this.$refs['form'].$refs['tree'][0]\r\n        let checkedKeys = tree.getCheckedKeys()\r\n        this.$refs['form'].form.roleAuth = checkedKeys\r\n      }\r\n      this.$refs['form'].$refs['validateForm'].validate(async valid => {\r\n        if (valid) {\r\n          try {\r\n            if ([\"addProduct\"].includes(this.type)) {\r\n              await this.handleUploadRequest()\r\n            } else {\r\n              this.axiosResult = await this.$axios(this.type, this.$refs['form'].form)\r\n            }\r\n            if (!this.axiosResult) return false\r\n            this.$bus.$emit('changeData', this.axiosResult.data.result)\r\n            this.$bus.$emit('transmitFormData', this.axiosResult.data.result)\r\n            if (this.type === \"addProductsCategory\") this.formatSelectOptions(this.categoryList)\r\n            this.close()\r\n          } catch (error) {\r\n            console.log(error)\r\n          }\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    formatSelectOptions(data) {\r\n      this.categoryList = data\r\n      this.firstCategory = data.reduce((acc, curr) => {\r\n        acc.push({\r\n          categoryName: curr.categoryName,\r\n          id: curr?.id\r\n        })\r\n        return acc\r\n      }, [])\r\n      this.selectOptions = { firstCategory: this.firstCategory, secondCategory: this.secondCategory, thirdCategory: this.thirdCategory }\r\n    },\r\n    formatTreeData(datas) {\r\n      return datas.map(item => {\r\n        if (!item.children) {\r\n          return {\r\n            id: item.meta.id,\r\n            name: item.name\r\n          }\r\n        }\r\n        if (item.children) {\r\n          return {\r\n            id: item.meta.id,\r\n            name: item.name,\r\n            children: this.formatTreeData(item.children)\r\n          }\r\n        }\r\n      })\r\n    },\r\n    handleUploadChange(file) {\r\n      let maxSize = 5 * 1024 * 1024\r\n      if (file.size > maxSize) {\r\n        Message({\r\n          type: \"warning\",\r\n          message: \"文件不得大于5M\"\r\n        })\r\n        this.$refs[\"form\"].$refs[\"upload\"][0].handleRemove(file)\r\n        return false\r\n      }\r\n      if (!(/image/g.test(file.raw.type))) {\r\n        Message({\r\n          type: \"warning\",\r\n          message: \"只能选择图片格式的文件\"\r\n        })\r\n        this.$refs[\"form\"].$refs[\"upload\"][0].handleRemove(file)\r\n        return false\r\n      }\r\n      this.productFormData.append(\"file\", file.raw)\r\n    },\r\n    async handleUploadRequest() {\r\n      for (const key in this.$refs['form'].form) {\r\n        this.productFormData.append(key, this.$refs['form'].form[key])\r\n      }\r\n      this.axiosResult = await this.$axios(this.type, this.productFormData)\r\n    },\r\n    closeModal() {\r\n      this.$bus.$emit(\"initTableData\")\r\n      this.close()\r\n    },\r\n    ...mapActions(['close'])\r\n  },\r\n  beforeDestroy() {\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"stylus\">\r\n.dialogModal .el-dialog \r\n  max-height 70vh\r\n  overflow-y: auto\r\n  .el-dialog__header\r\n    text-align center\r\n</style>\r\n"]}]}